package com.setvect.bokslstock2.koreainvestment.ws.model

import org.assertj.core.api.Assertions
import org.junit.jupiter.api.Test
import java.time.LocalDate
import java.time.LocalTime

internal class RealtimeExecutionTest {
    @Test
    fun parsing() {
        val rawText =
            "005930^151619^59700^2^900^1.53^59055.30^58200^59900^58200^59700^59600^34^10247065^605142384800^21595^33584^11989^155.15^3922631^6086067^1^0.60^105.75^090008^2^1500^150053^5^-200^090008^2^1500^20220831^20^N^33918^140697^663790^898987^0.17^9048877^113.24^0^^58200"

        val realtimeExecution = RealtimeExecution.parsing(rawText)
        Assertions.assertThat(realtimeExecution.code).isEqualTo("005930")
        Assertions.assertThat(realtimeExecution.stckCntgHour).isEqualTo(LocalTime.of(15, 16, 19))
        Assertions.assertThat(realtimeExecution.stckPrpr).isEqualTo(59700)
        Assertions.assertThat(realtimeExecution.stckOprc).isEqualTo(58200)
        Assertions.assertThat(realtimeExecution.stckHgpr).isEqualTo(59900)
        Assertions.assertThat(realtimeExecution.stckLwpr).isEqualTo(58200)
        Assertions.assertThat(realtimeExecution.bsopDate).isEqualTo(LocalDate.of(2022, 8, 31))
    }

    @Test
    fun parsing2() {
        val rawText =
            "233740^095645^14605^2^300^2.10^14336.14^14325^14605^14100^14605^14600^10^6325926^90689350235^12411^14040^1629^112.46^2937147^3302973^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.21^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.14^14325^14605^14100^14605^14600^144^6326070^90691453355^12411^14041^1630^112.46^2937147^3303117^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.14^14325^14605^14100^14605^14600^10^6326080^90691599405^12411^14042^1631^112.46^2937147^3303127^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.15^14325^14605^14100^14605^14600^50^6326130^90692329655^12411^14043^1632^112.46^2937147^3303177^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.15^14325^14605^14100^14605^14600^1^6326131^90692344260^12411^14044^1633^112.46^2937147^3303178^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.15^14325^14605^14100^14605^14600^2^6326133^90692373470^12411^14045^1634^112.46^2937147^3303180^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.16^14325^14605^14100^14605^14600^362^6326495^90697660480^12411^14046^1635^112.47^2937147^3303542^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.16^14325^14605^14100^14605^14600^5^6326500^90697733505^12411^14047^1636^112.47^2937147^3303547^1^0.53^30.19^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.22^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.21^14325^14605^14100^14605^14600^1000^6327500^90712338505^12411^14048^1637^112.51^2937147^3304547^1^0.53^30.20^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^1584^22762^131998^173675^10.01^5538727^114.24^0^^14325^" +
                    "233740^095645^14605^2^300^2.10^14336.21^14325^14605^14100^14610^14605^1^6327501^90712353110^12412^14048^1636^112.51^2937148^3304547^5^0.53^30.20^090029^2^280^095354^3^0^091919^2^505^20230725^20^N^10391^3369^134974^168266^10.01^5538727^114.24^0^^14325"

        val realtimeExecutionList = RealtimeExecution.parsingMulti(rawText)

        println("사이즈: ${realtimeExecutionList.size}")
        // 매도호가1
        val askp1 = realtimeExecutionList.map { it.askp1 }

        val targetPrice = 14610
        if (askp1.any { targetPrice <= it }) {
            println("목표($targetPrice)가 이상의 매도호가1 있음: $askp1")
        }
        println("끝.")
    }
}